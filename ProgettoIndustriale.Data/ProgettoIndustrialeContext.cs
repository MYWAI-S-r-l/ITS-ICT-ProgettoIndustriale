// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using ProgettoIndustriale.Type.Domain;
using ProgettoIndustriale.Data.ConfigClasses;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;



namespace ProgettoIndustriale.Data;
public partial class ProgettoIndustrialeContext : DbContext
{
    private readonly StreamWriter _logStream = new StreamWriter("../../../../ProgettoIndustriale.Data/log/mylog.txt", append: false); //TODO: prendere path del log da config

    public ProgettoIndustrialeContext()
    {
    }

    public ProgettoIndustrialeContext(DbContextOptions<ProgettoIndustrialeContext> options)
        : base(options)
    {
        
    }

  
    //BE
    public virtual DbSet<Price> Price { get; set; }
    public virtual DbSet<Load> Load { get; set; }
    public virtual DbSet<MacroZone> MacroZone { get; set; }
    public virtual DbSet<Province> Province{ get; set; }
    public virtual DbSet<Region> Region { get; set; }
    public virtual DbSet<Industry> Industry { get; set; }
    public virtual DbSet<Weather> Weather { get; set; }
    public virtual DbSet<Date> Date { get; set; }
    public virtual DbSet<Commodity> Commodity { get; set; }
    public virtual DbSet<Generation> Generation { get; set; }
    public virtual DbSet<ApiCallsLogs> ApiCallsLogs { get; set; }

    //----Terna
    public virtual DbSet<TernaToken> TernaToken { get; set; }


    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        // Sono stati creati dei file di configurazione nella cartella "ModelBuilder" per avere più ordine.

        modelBuilder.ApplyConfiguration(new ConfigLoad());
        modelBuilder.ApplyConfiguration(new ConfigPrice());
        modelBuilder.ApplyConfiguration(new ConfigMacroZone());
        modelBuilder.ApplyConfiguration(new ConfigProvince());
        modelBuilder.ApplyConfiguration(new ConfigRegion());
        modelBuilder.ApplyConfiguration(new ConfigIndustry());
        modelBuilder.ApplyConfiguration(new ConfigCommodity());
        modelBuilder.ApplyConfiguration(new ConfigGeneration());
        modelBuilder.ApplyConfiguration(new ConfigDate());
        modelBuilder.ApplyConfiguration(new ConfigWeather());
        
        modelBuilder.ApplyConfiguration(new ConfigTernaToken());
        modelBuilder.ApplyConfiguration(new ConfigApiCallsLogs());
    }



   
    //public virtual DbSet<Provincia> Province{ get; set; }
    

    

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.LogTo(_logStream.WriteLine).EnableSensitiveDataLogging().EnableDetailedErrors();
        
    }

    public override void Dispose()
    {
        base.Dispose();
        _logStream.Dispose();
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();
        await _logStream.DisposeAsync();
    }
    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
